# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type InstantNoodle {
  id: ID!
  name: String
  brand: String
  spicinessLevel: Int
  spicinessDescription: String
  originCountry: InstantNoodleOriginCountryType
  rating: Int
  reviewsCount: Int
  lastReviewedAt: DateTime
  imageURL: String
  category: Category
  createdAt: DateTime
}

enum InstantNoodleOriginCountryType {
  south_korea
  indonesia
  malaysia
  thailand
  japan
  singapore
  vietnam
  china
  taiwan
  philippines
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input InstantNoodleWhereUniqueInput {
  id: ID
}

input InstantNoodleWhereInput {
  AND: [InstantNoodleWhereInput!]
  OR: [InstantNoodleWhereInput!]
  NOT: [InstantNoodleWhereInput!]
  id: IDFilter
  name: StringFilter
  brand: StringFilter
  spicinessLevel: IntFilter
  originCountry: InstantNoodleOriginCountryTypeNullableFilter
  rating: IntFilter
  reviewsCount: IntFilter
  lastReviewedAt: DateTimeNullableFilter
  imageURL: StringFilter
  category: CategoryWhereInput
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input InstantNoodleOriginCountryTypeNullableFilter {
  equals: InstantNoodleOriginCountryType
  in: [InstantNoodleOriginCountryType!]
  notIn: [InstantNoodleOriginCountryType!]
  not: InstantNoodleOriginCountryTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input InstantNoodleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  brand: OrderDirection
  spicinessLevel: OrderDirection
  originCountry: OrderDirection
  rating: OrderDirection
  reviewsCount: OrderDirection
  lastReviewedAt: OrderDirection
  imageURL: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input InstantNoodleUpdateInput {
  name: String
  brand: String
  spicinessLevel: Int
  originCountry: InstantNoodleOriginCountryType
  rating: Int
  reviewsCount: Int
  lastReviewedAt: DateTime
  imageURL: String
  category: CategoryRelateToOneForUpdateInput
  createdAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input InstantNoodleUpdateArgs {
  where: InstantNoodleWhereUniqueInput!
  data: InstantNoodleUpdateInput!
}

input InstantNoodleCreateInput {
  name: String
  brand: String
  spicinessLevel: Int
  originCountry: InstantNoodleOriginCountryType
  rating: Int
  reviewsCount: Int
  lastReviewedAt: DateTime
  imageURL: String
  category: CategoryRelateToOneForCreateInput
  createdAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type Category {
  id: ID!
  name: String
  noodles(where: InstantNoodleWhereInput! = {}, orderBy: [InstantNoodleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstantNoodleWhereUniqueInput): [InstantNoodle!]
  noodlesCount(where: InstantNoodleWhereInput! = {}): Int
  createdAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
  noodles: InstantNoodleManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input InstantNoodleManyRelationFilter {
  every: InstantNoodleWhereInput
  some: InstantNoodleWhereInput
  none: InstantNoodleWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input CategoryUpdateInput {
  name: String
  noodles: InstantNoodleRelateToManyForUpdateInput
  createdAt: DateTime
}

input InstantNoodleRelateToManyForUpdateInput {
  disconnect: [InstantNoodleWhereUniqueInput!]
  set: [InstantNoodleWhereUniqueInput!]
  create: [InstantNoodleCreateInput!]
  connect: [InstantNoodleWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
  noodles: InstantNoodleRelateToManyForCreateInput
  createdAt: DateTime
}

input InstantNoodleRelateToManyForCreateInput {
  create: [InstantNoodleCreateInput!]
  connect: [InstantNoodleWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createInstantNoodle(data: InstantNoodleCreateInput!): InstantNoodle
  createInstantNoodles(data: [InstantNoodleCreateInput!]!): [InstantNoodle]
  updateInstantNoodle(where: InstantNoodleWhereUniqueInput!, data: InstantNoodleUpdateInput!): InstantNoodle
  updateInstantNoodles(data: [InstantNoodleUpdateArgs!]!): [InstantNoodle]
  deleteInstantNoodle(where: InstantNoodleWhereUniqueInput!): InstantNoodle
  deleteInstantNoodles(where: [InstantNoodleWhereUniqueInput!]!): [InstantNoodle]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
}

type Query {
  instantNoodle(where: InstantNoodleWhereUniqueInput!): InstantNoodle
  instantNoodles(where: InstantNoodleWhereInput! = {}, orderBy: [InstantNoodleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: InstantNoodleWhereUniqueInput): [InstantNoodle!]
  instantNoodlesCount(where: InstantNoodleWhereInput! = {}): Int
  category(where: CategoryWhereUniqueInput!): Category
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  categoriesCount(where: CategoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
